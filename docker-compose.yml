services:
  # --- Authorization Service ---
  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
    restart: on-failure

  # --- PostgreSQL Database ---
  postgres:
    image: postgres:14-alpine
    container_name: session-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=your_user
      - POSTGRES_PASSWORD=your_password
      - POSTGRES_DB=your_db_name
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your_user -d your_db_name"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # --- RabbitMQ Message Broker ---
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    container_name: session-mq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Public API Service ---
  public-api-service:
    build: ./public-api-service
    container_name: public-api-service
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/your_db_name
      - SPRING_DATASOURCE_USERNAME=your_user
      - SPRING_DATASOURCE_PASSWORD=your_password
      - SPRING_RABBITMQ_HOST=rabbitmq
      - AUTH_SERVICE_BASE_URL=http://auth-service:8081
    depends_on:
      # Ensures that other services are healthy before this service starts
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started # No healthcheck on auth-service, so we wait for start
    restart: on-failure

volumes:
  postgres_data: